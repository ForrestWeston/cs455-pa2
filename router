#!/usr/bin/python
import string
import socket
import select
import readrouters

INF = 64
debugging = True

def debug(s):
    if debugging:
        print(s)
    return

class Router:
    def __init__(self, name, host, baseport, link_info):
       self.name, self.host, self.baseport, self.links = name, host, baseport, link_info
       self.routingTable = {} # key represents "from router" and value is a DistanceVector() that represents the costs to every other router
       
       debug(self.name)
       debug(self.host)
       debug(self.baseport)

    def initRoutingTable(self, routers_table):
        #Initialize routing table using self.links and RouterInfo
        # can access cost to link with self.routingTable[self.name].costToDict[neighbor]

        mine = DistanceVector(self.name, routers_table, self.links)
        self.routingTable[self.name] = mine # create dist vector for self

        for router in routers_table.keys(): # for each router
            if router == self.name:
                continue # skip own dist vect since already created
            vect = DistanceVector(router, routers_table)
            self.routingTable[router] = vect # create distance vector for all other nodes in network

        return # We need to implement a routing table that shows the next router to hop to as well
    
    def printRouteTable(self):
        print("-------------------------------------")
        print ("Routing Table For " + self.name)
        print ("<from>: {<to>: <cost>}")
        for vectors in self.routingTable.keys():
            print(vectors + ": " + str(self.routingTable[vectors].costToDict))
        print("-------------------------------------")
        return
    
    def updateLinkCost(self, dest, new_cost):
        self.routingTable[self.name].costToDict[dest] = new_cost # update cost to neighbor in routing table
        return
        

class DistanceVector:
    def __init__(self, for_router, routers_table, link_info=None): # Constructor for creating a distance vector with known link costs
        self.costToDict = {} # key represents the "router sending to" and value represents "cost to router"
        self.name = for_router # represents "from router"

        for router in routers_table.keys():         # for each router
            if router == for_router:                    # set cost to 0 if it is self
                self.costToDict[router] = 0
            elif link_info is not None and router in link_info.keys():            #   set the cost of the link if neighbor
                self.costToDict[router] = link_info[router].cost
            else:
                self.costToDict[router] = INF           #   otherwise set the cost to infinity


if __name__=='__main__':
    import sys
    # If no poison control
        # sys.argv[1] = 'testdir'
        # sys.argv[2] = 'routername'
    # If poison control
        # sys.argv[1] = '-p'
        # sys.argv[2] = 'testdir'
        # sys.argv[3] = 'routername'
        
    # read in cmd line parameters
    if len(sys.argv) == 3:
        poison_rev = False;
        testdir = sys.argv[1]
        routername = sys.argv[2]
    elif len(sys.argv) == 4 and sys.argv[1] == "-p":
        poison_rev = True;
        testdir = sys.argv[2]
        routername = sys.argv[3]

    # Use readrouters() to get table of all routers present in network
    routersTable = readrouters.readrouters(testdir)
    # Use readlinks() to get cost of each link to neighbors
    linksTable = readrouters.readlinks(testdir, routername)

    # Initialize a new Router()
    node = Router(routername, routersTable[routername].host, routersTable[routername].baseport, linksTable)
    node.initRoutingTable(routersTable) # use routersTable to know how many nodes in network

    # Create a socket for the base port
    baseSock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    baseSock.bind((node.host, node.baseport)) # Bind the socket to the addr

    # Create connected sockets for neighbors
    neighborSocks = {} # key represents neighbor and value reperesents the socket associated with neighbor

    i = 1
    for link in linksTable.keys():
        localPort = linksTable[link].locallink
        remotePort = linksTable[link].remotelink
        neighborBasePort = routersTable[link].baseport
        
        debug("binding to " + str(node.baseport + localPort))
        debug("connecting to " + str(neighborBasePort + remotePort))
        
        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        sock.bind((node.host, node.baseport+localPort))
        res = sock.connect_ex((node.host, neighborBasePort+remotePort))
        neighborSocks[link] = sock

        i += 1

    inputs = [baseSock] # Sockets from which we expect to read
    for sock in neighborSocks.values():
        inputs.append(sock) # add all neighbor sockets to inputs as well

    # Select loop
    while 1:
        # wait for a socket to be ready
        readable, writable, exceptional = select.select(inputs, [], [], 30) # only need readable set for project so writefds and exceptionfs is set to None

        # handle inputs
        for s in readable:
            if s is baseSock:
                data, addr = s.recvfrom(1024) # L & P messages
            else:
                data = s.recv(2056) # U messages
        
            command = string.split(data)
            
            if command[0] == 'L':
                node.updateLinkCost(command[1], command[2]) # update link cost to a neighbor
            elif command[0] == 'U':
                debug("butts")
            elif command[0] == 'P':
                if len(command) > 1 and command[1] == node.name: # print table for this router only
                    node.printRouteTable()
                else:
                    node.printRouteTable() # print every routing table for every router

            # if data is L or U messsage:
                # make changes to own distance vector and routing table
                # if changes to routing table:
                    # send U-messages to neighbors
                    # print(node.name - dest: <d> cost: <c> nexthop: <n>)

        # send U-message to each of its neighbors every 30 seconds after a timeout occurs
        if (len(readable) == 0):
            #for neighbor, sock in neighborSocks.items():
                #sock.send("hello neighbor " + neighbor)
            debug("timeout!")

